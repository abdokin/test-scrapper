{
  "title": "Ruby on Rails",
  "attributes": {
    "overview": "Ce test Ruby on Rails évalue les compétences des candidats dans l'utilisation du framework Ruby on Rails. Ce test vous aidera à identifier les candidats capables d'utiliser efficacement Ruby on Rails et de travailler de manière autonome sur des projets de développement.",
    "level": "intermediate",
    "covered_skills": [
      "Active Record",
      "Action Controller et Routing",
      "Action View et Action Helpers",
      "Concepts avancés"
    ],
    "relevancy": "Développeurs Ruby on Rails et autres fonctions de programmation nécessitant une bonne maîtrise du framework Ruby on Rails.",
    "description": "Le framework Ruby on Rails permet aux développeurs de créer des applications plus rapidement en se concentrant sur les fonctionnalités et la logique de l'application, plutôt que sur le code standard. Ruby on Rails permet également d'apporter facilement des modifications en cours de route, ce qui rend le framework particulièrement adapté au développement rapide d'applications (RAD).\n\nCe test Ruby on Rails (RoR) évalue les compétences des candidats à utiliser le framework en les évaluant dans les quatre domaines essentiels de Ruby on Rails : Active Record, Action Controller et Routing, Action View et Action Helpers, et des concepts avancés (comme Action Mailers et Worker Classes).\n\nCe test de sélection vous aidera à identifier les candidats qui ont une expérience pratique de Ruby on Rails et qui peuvent résoudre les problèmes typiques qui se posent quotidiennement lorsqu'on travaille avec des applications Ruby on Rails. Grâce à des questions basées sur des scénarios qui comprennent des aperçus de codes et des requêtes, le test se concentre sur les compétences et les capacités pratiques des candidats et les évalue afin de vous aider à identifier les développeurs Ruby on Rails capables de résoudre des problèmes concrets.",
    "category": "Programming skills",
    "language": "french",
    "questions_to_answer": 15,
    "duration_seconds": 600,
    "position": 1
  },
  "questions": [
    {
      "question_attributes": {
        "type": "multiple_choice",
        "preview": true,
        "content": "<p>Dans Rails 7, quelle est la méthode recommandée pour gérer le JavaScript frontend?</p>"
      },
      "options": [
        {
          "content": "<p>Webpacker avec compilation Node.js</p>"
        },
        {
          "content": "<p>Import maps avec importmap-rails</p>",
          "correct": true
        },
        {
          "content": "<p>Asset pipeline classique avec Sprockets</p>"
        },
        {
          "content": "<p>Configuration manuelle de Webpack</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "preview": true,
        "content": "<p>Quelle est la nouvelle fonctionnalité principale introduite dans Rails 7 pour la manipulation du DOM?</p>"
      },
      "options": [
        {
          "content": "<p>Turbo Frames et Turbo Streams</p>",
          "correct": true
        },
        {
          "content": "<p>jQuery intégré</p>"
        },
        {
          "content": "<p>React Components</p>"
        },
        {
          "content": "<p>Vue.js Templates</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "preview": true,
        "content": "<p>Quels sont les composants principaux de Hotwire dans Rails 7?</p>"
      },
      "options": [
        {
          "content": "<p>Turbo</p>",
          "correct": true
        },
        {
          "content": "<p>Stimulus</p>",
          "correct": true
        },
        {
          "content": "<p>Strada</p>",
          "correct": true
        },
        {
          "content": "<p>Redux</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment définir une relation polymorphique dans Rails 7?</p>"
      },
      "options": [
        {
          "content": "<p>belongs_to :commentable, polymorphic: true</p>",
          "correct": true
        },
        {
          "content": "<p>has_many :comments, as: :polymorphic</p>"
        },
        {
          "content": "<p>polymorphic_association :commentable</p>"
        },
        {
          "content": "<p>has_polymorphic :comments</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la meilleure pratique pour gérer les jobs d'arrière-plan dans Rails 7?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser Active Job avec Sidekiq</p>",
          "correct": true
        },
        {
          "content": "<p>Créer des threads Ruby manuellement</p>"
        },
        {
          "content": "<p>Utiliser des scripts cron</p>"
        },
        {
          "content": "<p>Exécuter tout de manière synchrone</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment gérer les uploads de fichiers dans Rails 7?</p>"
      },
      "options": [
        {
          "content": "<p>Active Storage</p>",
          "correct": true
        },
        {
          "content": "<p>Carrierwave gem</p>"
        },
        {
          "content": "<p>Paperclip gem</p>"
        },
        {
          "content": "<p>Upload manuel avec File.open</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles fonctionnalités sont disponibles avec Action Cable?</p>"
      },
      "options": [
        {
          "content": "<p>WebSocket temps réel</p>",
          "correct": true
        },
        {
          "content": "<p>Broadcast automatique</p>",
          "correct": true
        },
        {
          "content": "<p>Channel subscriptions</p>",
          "correct": true
        },
        {
          "content": "<p>HTTP long polling</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment optimiser les requêtes N+1 dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser includes, eager_load ou preload</p>",
          "correct": true
        },
        {
          "content": "<p>Augmenter la mémoire du serveur</p>"
        },
        {
          "content": "<p>Utiliser plus d'indexes</p>"
        },
        {
          "content": "<p>Mettre en cache toute la base de données</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la meilleure approche pour implémenter une API versionnée dans Rails 7?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser le namespace dans les routes et les modules pour les contrôleurs</p>",
          "correct": true
        },
        {
          "content": "<p>Créer des contrôleurs séparés sans versioning</p>"
        },
        {
          "content": "<p>Utiliser différentes bases de données pour chaque version</p>"
        },
        {
          "content": "<p>Dupliquer tout le code pour chaque version</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont les bonnes pratiques pour optimiser les performances d'une application Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser la mise en cache avec Redis ou Memcached</p>",
          "correct": true
        },
        {
          "content": "<p>Implémenter le lazy loading des associations</p>",
          "correct": true
        },
        {
          "content": "<p>Utiliser les indexes de base de données appropriés</p>",
          "correct": true
        },
        {
          "content": "<p>Charger toutes les données en mémoire au démarrage</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont des options valides pour implémenter une recherche full-text dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Elasticsearch</p>",
          "correct": true
        },
        {
          "content": "<p>PostgreSQL full-text search</p>",
          "correct": true
        },
        {
          "content": "<p>MySQL FULLTEXT index</p>",
          "correct": true
        },
        {
          "content": "<p>Charger tous les enregistrements en mémoire pour filtrer</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la meilleure approche pour gérer les transactions complexes dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser ActiveRecord::Base.transaction avec des saves conditionnels</p>",
          "correct": true
        },
        {
          "content": "<p>Sauvegarder chaque modèle individuellement</p>"
        },
        {
          "content": "<p>Désactiver les validations pour la performance</p>"
        },
        {
          "content": "<p>Utiliser uniquement des requêtes SQL brutes</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont les meilleures pratiques pour tester une application Rails 7?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser RSpec pour les tests unitaires et d'intégration</p>",
          "correct": true
        },
        {
          "content": "<p>Implémenter des tests système avec Capybara</p>",
          "correct": true
        },
        {
          "content": "<p>Utiliser des factories au lieu de fixtures</p>",
          "correct": true
        },
        {
          "content": "<p>Tester uniquement en production</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quels sont des adaptateurs valides pour ActiveJob dans Rails 7?</p>"
      },
      "options": [
        {
          "content": "<p>Sidekiq</p>",
          "correct": true
        },
        {
          "content": "<p>SolidQueue</p>",
          "correct": true
        },
        {
          "content": "<p>Resque</p>",
          "correct": true
        },
        {
          "content": "<p>Delayed::Job</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont des approches valides pour gérer les autorisations dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Pundit</p>",
          "correct": true
        },
        {
          "content": "<p>CanCanCan</p>",
          "correct": true
        },
        {
          "content": "<p>Système d'autorisation personnalisé</p>",
          "correct": true
        },
        {
          "content": "<p>Action Policy</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment gérer efficacement les erreurs dans une API Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Implémenter un middleware personnalisé avec gestion globale des erreurs</p>",
          "correct": true
        },
        {
          "content": "<p>Ignorer toutes les erreurs</p>"
        },
        {
          "content": "<p>Utiliser rescue_from sans logging</p>"
        },
        {
          "content": "<p>Renvoyer toujours un statut 200</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la meilleure approche pour implémenter une API GraphQL dans Rails 7?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser graphql-ruby avec des types et résolveurs bien structurés</p>",
          "correct": true
        },
        {
          "content": "<p>Créer une API REST et la convertir</p>"
        },
        {
          "content": "<p>Utiliser uniquement des requêtes SQL</p>"
        },
        {
          "content": "<p>Implémenter GraphQL from scratch</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont les bonnes pratiques pour l'utilisation d'Action Cable?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser Redis comme adapter en production</p>",
          "correct": true
        },
        {
          "content": "<p>Implémenter une gestion appropriée des reconnexions</p>",
          "correct": true
        },
        {
          "content": "<p>Gérer correctement l'authentification des connexions</p>",
          "correct": true
        },
        {
          "content": "<p>Broadcaster tous les changements de modèles</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la meilleure approche pour gérer des formulaires imbriqués complexes?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser accepts_nested_attributes_for avec validation personnalisée</p>",
          "correct": true
        },
        {
          "content": "<p>Créer des formulaires séparés</p>"
        },
        {
          "content": "<p>Utiliser uniquement JavaScript</p>"
        },
        {
          "content": "<p>Sauvegarder chaque modèle séparément</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment optimiser les requêtes de base de données volumineuses?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser find_each avec batch_size approprié</p>",
          "correct": true
        },
        {
          "content": "<p>Charger tous les enregistrements en mémoire</p>"
        },
        {
          "content": "<p>Utiliser uniquement des requêtes SQL brutes</p>"
        },
        {
          "content": "<p>Désactiver les validations</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont les meilleures pratiques pour la mise en cache dans Rails 7?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser fragment caching avec des clés appropriées</p>",
          "correct": true
        },
        {
          "content": "<p>Implémenter Russian Doll caching</p>",
          "correct": true
        },
        {
          "content": "<p>Configurer un cache store distribué</p>",
          "correct": true
        },
        {
          "content": "<p>Mettre en cache toutes les pages</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la meilleure approche pour gérer les uploads de fichiers volumineux?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser Active Storage avec direct upload et background processing</p>",
          "correct": true
        },
        {
          "content": "<p>Uploader directement dans la base de données</p>"
        },
        {
          "content": "<p>Stocker les fichiers dans le système de fichiers local</p>"
        },
        {
          "content": "<p>Utiliser des gems obsolètes comme Paperclip</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment gérer efficacement les notifications dans une application Rails moderne?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser Action Cable avec un système de notifications polymorphique</p>",
          "correct": true
        },
        {
          "content": "<p>Envoyer des emails pour chaque événement</p>"
        },
        {
          "content": "<p>Utiliser des alerts JavaScript</p>"
        },
        {
          "content": "<p>Stocker uniquement en base de données</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont les bonnes pratiques pour la gestion des assets dans Rails 7?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser import maps pour le JavaScript moderne</p>",
          "correct": true
        },
        {
          "content": "<p>Configurer correctement le CDN en production</p>",
          "correct": true
        },
        {
          "content": "<p>Implémenter la compression et le fingerprinting</p>",
          "correct": true
        },
        {
          "content": "<p>Inclure tous les assets dans application.js</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment implémenter une recherche full-text performante?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser Elasticsearch avec des indexeurs personnalisés</p>",
          "correct": true
        },
        {
          "content": "<p>Utiliser LIKE avec des wildcards</p>"
        },
        {
          "content": "<p>Implémenter une recherche en mémoire</p>"
        },
        {
          "content": "<p>Utiliser uniquement des requêtes SQL simples</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment implémenter efficacement le partitionnement de base de données dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser PostgreSQL partitioning avec des configurations appropriées dans schema.rb</p>",
          "correct": true
        },
        {
          "content": "<p>Créer manuellement plusieurs bases de données</p>"
        },
        {
          "content": "<p>Dupliquer les tables pour chaque partition</p>"
        },
        {
          "content": "<p>Utiliser uniquement des vues de base de données</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont les meilleures pratiques pour le monitoring d'une application Rails en production?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser New Relic ou Datadog pour le monitoring applicatif</p>",
          "correct": true
        },
        {
          "content": "<p>Implémenter des health checks personnalisés</p>",
          "correct": true
        },
        {
          "content": "<p>Configurer des alertes basées sur des métriques</p>",
          "correct": true
        },
        {
          "content": "<p>Vérifier manuellement les logs</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la meilleure approche pour gérer les migrations de base de données à grande échelle?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser des migrations par lots avec des background jobs</p>",
          "correct": true
        },
        {
          "content": "<p>Exécuter toutes les migrations en une fois</p>"
        },
        {
          "content": "<p>Modifier directement la base de données</p>"
        },
        {
          "content": "<p>Ignorer les migrations anciennes</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment gérer efficacement les dépendances externes dans une application Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser des service objects avec circuit breakers et fallbacks</p>",
          "correct": true
        },
        {
          "content": "<p>Appeler directement les APIs externes</p>"
        },
        {
          "content": "<p>Stocker les réponses en base de données</p>"
        },
        {
          "content": "<p>Utiliser uniquement des webhooks</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont les bonnes pratiques pour l'internationalisation dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser I18n avec backend approprié</p>",
          "correct": true
        },
        {
          "content": "<p>Implémenter la détection automatique de la locale</p>",
          "correct": true
        },
        {
          "content": "<p>Gérer les pluralisations correctement</p>",
          "correct": true
        },
        {
          "content": "<p>Hardcoder les textes dans les vues</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la meilleure approche pour gérer les versions d'API dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser le namespace et le versioning dans l'URL avec documentation API</p>",
          "correct": true
        },
        {
          "content": "<p>Créer différentes applications</p>"
        },
        {
          "content": "<p>Modifier directement le code existant</p>"
        },
        {
          "content": "<p>Ignorer le versioning</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont les meilleures pratiques pour les tests d'intégration dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser Capybara avec Selenium</p>",
          "correct": true
        },
        {
          "content": "<p>Implémenter des tests de bout en bout</p>",
          "correct": true
        },
        {
          "content": "<p>Utiliser des mocks appropriés</p>",
          "correct": true
        },
        {
          "content": "<p>Tester uniquement en production</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment optimiser les performances des requêtes polymorphiques?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser des index composites et eager loading approprié</p>",
          "correct": true
        },
        {
          "content": "<p>Éviter les associations polymorphiques</p>"
        },
        {
          "content": "<p>Utiliser uniquement des requêtes simples</p>"
        },
        {
          "content": "<p>Ignorer l'optimisation</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la meilleure approche pour implémenter un système de recherche avancé?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser Elasticsearch avec des agrégations et filtres complexes</p>",
          "correct": true
        },
        {
          "content": "<p>Utiliser WHERE LIKE en SQL</p>"
        },
        {
          "content": "<p>Filtrer en mémoire</p>"
        },
        {
          "content": "<p>Créer des tables de recherche séparées</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment implémenter une architecture multi-base de données efficace dans Rails 7?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser multiple-database configurations avec sharding approprié</p>",
          "correct": true
        },
        {
          "content": "<p>Créer des connexions manuelles</p>"
        },
        {
          "content": "<p>Utiliser une seule base de données</p>"
        },
        {
          "content": "<p>Dupliquer les données partout</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont les meilleures pratiques pour l'utilisation d'Action Mailer dans une application à grande échelle?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser Active Job pour l'envoi asynchrone</p>",
          "correct": true
        },
        {
          "content": "<p>Implémenter le tracking et les analytics</p>",
          "correct": true
        },
        {
          "content": "<p>Utiliser des templates précompilés</p>",
          "correct": true
        },
        {
          "content": "<p>Envoyer tous les emails de manière synchrone</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment implémenter un système de commentaires temps réel avec Action Cable?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser Action Cable avec Turbo Streams et callbacks appropriés</p>",
          "correct": true
        },
        {
          "content": "<p>Rafraîchir la page régulièrement</p>"
        },
        {
          "content": "<p>Utiliser uniquement AJAX</p>"
        },
        {
          "content": "<p>Stocker les commentaires en session</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quelles sont les meilleures pratiques pour la gestion des erreurs dans une API Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Implémenter une couche de serialisation d'erreurs cohérente</p>",
          "correct": true
        },
        {
          "content": "<p>Utiliser des codes HTTP appropriés</p>",
          "correct": true
        },
        {
          "content": "<p>Logger les erreurs avec contexte</p>",
          "correct": true
        },
        {
          "content": "<p>Retourner toujours 200 OK</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment optimiser les performances de Active Storage pour les uploads volumineux?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser direct uploads avec analysis asynchrone</p>",
          "correct": true
        },
        {
          "content": "<p>Uploader tous les fichiers synchronement</p>"
        },
        {
          "content": "<p>Stocker les fichiers en base de données</p>"
        },
        {
          "content": "<p>Désactiver le processing</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la meilleure approche pour implémenter un système de notifications complexe?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser un pattern Observable avec Action Cable et workers</p>",
          "correct": true
        },
        {
          "content": "<p>Envoyer uniquement des emails</p>"
        },
        {
          "content": "<p>Utiliser des alerts JavaScript</p>"
        },
        {
          "content": "<p>Stocker en session</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment gérer efficacement les webhooks dans une application Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser des workers avec retry logic et idempotency</p>",
          "correct": true
        },
        {
          "content": "<p>Traiter de manière synchrone</p>"
        },
        {
          "content": "<p>Ignorer les échecs</p>"
        },
        {
          "content": "<p>Stocker uniquement en base de données</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment implémenter un système de recherche autocomplete performant?</p>"
      },
      "options": [
        {
          "content": "<p>Utiliser Elasticsearch avec indexation appropriée et caching</p>",
          "correct": true
        },
        {
          "content": "<p>Faire des requêtes LIKE sur chaque frappe</p>"
        },
        {
          "content": "<p>Charger toutes les données en mémoire</p>"
        },
        {
          "content": "<p>Utiliser uniquement JavaScript</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment définiriez-vous correctement des variables de différents types en Ruby? Considérez le code suivant:</p><br><pre><code class='language-ruby'>local_var = 'local'</code><br><code>@instance_var = 'instance'</code><br><code>@@class_var = 'class'</code><br><code>$global_var = 'global'</code></pre><br><br><p>Quelle est la signification de chaque préfixe?</p>"
      },
      "options": [
        {
          "content": "<p>- Pas de préfixe: variable locale</p><p>- @ : variable d'instance</p><p>- @@ : variable de classe</p><p>- $ : variable globale</p>",
          "correct": true
        },
        {
          "content": "<p>- Pas de préfixe: constante</p><p>- @ : variable globale</p><p>- @@ : variable d'instance</p><p>- $ : variable de classe</p>"
        },
        {
          "content": "<p>- Pas de préfixe: variable de classe</p><p>- @ : variable locale</p><p>- @@ : variable globale</p><p>- $ : variable d'instance</p>"
        },
        {
          "content": "<p>- Pas de préfixe: variable globale</p><p>- @ : variable de classe</p><p>- @@ : variable locale</p><p>- $ : variable d'instance</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la syntaxe correcte pour créer une migration qui ajoute une colonne email aux utilisateurs?</p><p>Examinez les différentes options de code:</p>"
      },
      "options": [
        {
          "content": "<pre><code class='language-ruby'>class AddEmailToUsers < ActiveRecord::Migration[7.0]<br>  def change<br>    add_column :users, :email, :string<br>    add_index :users, :email, unique: true<br>  end<br>end</code></pre>",
          "correct": true
        },
        {
          "content": "<pre><code class='language-ruby'>class EmailMigration < ActiveRecord::Migration<br>  def up<br>    users.add_column :email, :string<br>  end<br>end</code></pre>"
        },
        {
          "content": "<pre><code class='language-ruby'>class AddEmail < Migration<br>  def change<br>    add :users, :email, type: string<br>  end<br>end</code></pre>"
        },
        {
          "content": "<pre><code class='language-ruby'>class UsersEmail < ActiveRecord::Migration<br>  def migrate<br>    users.email = :string<br>  end<br>end</code></pre>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la meilleure façon d'implémenter un helper dans Rails et de l'utiliser dans une vue?</p>"
      },
      "options": [
        {
          "content": "<p>Dans <code>app/helpers/users_helper.rb</code>:</p><pre><code class='language-ruby'>module UsersHelper<br>  def format_user_name(user)<br>    \"#{user.first_name} #{user.last_name}\".titleize<br>  end<br>end</code></pre><br><br><p>Dans la vue:</p><pre><code class='language-erb'><%= format_user_name(@user) %></code></pre>",
          "correct": true
        },
        {
          "content": "<p>Dans <code>helper.rb</code>:</p><pre><code class='language-ruby'>def format_user_name(user)<br>  user.name.format<br>end</code></pre><br><br><p>Dans la vue:</p><pre><code class='language-erb'><% helper.format_user_name(@user) %></code></pre>"
        },
        {
          "content": "<p>Dans le helper:</p><pre><code class='language-ruby'>class UserHelper<br>  def format_name(user)<br>    user.full_name<br>  end<br>end</code></pre><br><br><p>Dans la vue:</p><pre><code class='language-erb'><%= UserHelper.format_name(@user) %></code></pre>"
        },
        {
          "content": "<p>Dans le helper:</p><pre><code class='language-ruby'>class Helper<br>  format_user_name = lambda do |user|<br>    user.name<br>  end<br>end</code></pre>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Qu'est-ce que l'ORM (Object-Relational Mapping) dans Ruby on Rails et quel est son rôle principal?</p>"
      },
      "options": [
        {
          "content": "<p>Un système qui permet de convertir les données entre une base de données relationnelle et des objets Ruby, principalement via Active Record</p>",
          "correct": true
        },
        {
          "content": "<p>Un outil pour organiser les fichiers Ruby dans une application Rails</p>"
        },
        {
          "content": "<p>Une méthode pour gérer les routes dans Rails</p>"
        },
        {
          "content": "<p>Un système de gestion des migrations de base de données</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Que signifie MVC dans Ruby on Rails et comment fonctionne-t-il?</p>"
      },
      "options": [
        {
          "content": "<p>Model-View-Controller : le Model gère les données et la logique, la View affiche l'interface utilisateur, et le Controller gère les interactions entre les deux</p>",
          "correct": true
        },
        {
          "content": "<p>Main-Variable-Class : un système de gestion des variables principales dans les classes</p>"
        },
        {
          "content": "<p>Multiple-Version-Control : un système de contrôle de version intégré à Rails</p>"
        },
        {
          "content": "<p>Method-Value-Container : un conteneur pour stocker les valeurs des méthodes</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quels sont les avantages principaux de l'utilisation de Ruby on Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Convention over Configuration - réduit la nécessité de configuration manuelle</p>",
          "correct": true
        },
        {
          "content": "<p>DRY (Don't Repeat Yourself) - encourage la réutilisation du code</p>",
          "correct": true
        },
        {
          "content": "<p>Large écosystème de gems et plugins disponibles</p>",
          "correct": true
        },
        {
          "content": "<p>Nécessite moins de ressources serveur que les autres frameworks</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la différence entre 'destroy' et 'delete' dans Ruby on Rails?</p>"
      },
      "options": [
        {
          "content": "<p>'destroy' exécute les callbacks et les validations avant la suppression, tandis que 'delete' supprime directement l'enregistrement sans exécuter les callbacks</p>",
          "correct": true
        },
        {
          "content": "<p>'destroy' et 'delete' font exactement la même chose</p>"
        },
        {
          "content": "<p>'destroy' supprime définitivement l'enregistrement tandis que 'delete' le met dans la corbeille</p>"
        },
        {
          "content": "<p>'delete' est plus rapide car il ne vérifie pas les associations</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Qu'est-ce qu'un 'scaffold' dans Ruby on Rails et quel est son utilité principale?</p>"
      },
      "options": [
        {
          "content": "<p>Un générateur qui crée automatiquement le modèle, le contrôleur, les vues et les migrations pour une ressource complète</p>",
          "correct": true
        },
        {
          "content": "<p>Un outil de débogage pour les applications Rails</p>"
        },
        {
          "content": "<p>Un système de gestion des dépendances</p>"
        },
        {
          "content": "<p>Un framework de test automatisé</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quels sont les composants principaux d'une migration Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Une classe qui hérite de ActiveRecord::Migration</p>",
          "correct": true
        },
        {
          "content": "<p>Une méthode 'change' ou des méthodes 'up' et 'down'</p>",
          "correct": true
        },
        {
          "content": "<p>Un timestamp dans le nom du fichier</p>",
          "correct": true
        },
        {
          "content": "<p>Un fichier de configuration JSON</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la différence entre 'include' et 'extend' dans Ruby on Rails?</p>"
      },
      "options": [
        {
          "content": "<p>'include' ajoute des méthodes d'instance tandis que 'extend' ajoute des méthodes de classe</p>",
          "correct": true
        },
        {
          "content": "<p>'include' et 'extend' font la même chose</p>"
        },
        {
          "content": "<p>'extend' ajoute des méthodes d'instance tandis que 'include' ajoute des méthodes de classe</p>"
        },
        {
          "content": "<p>'include' est pour les modules tandis que 'extend' est pour les classes</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Qu'est-ce qu'un helper dans Ruby on Rails et où doit-il être utilisé?</p>"
      },
      "options": [
        {
          "content": "<p>Un module contenant des méthodes réutilisables principalement destinées aux vues</p>",
          "correct": true
        },
        {
          "content": "<p>Une classe pour gérer la logique métier complexe</p>"
        },
        {
          "content": "<p>Un outil de débogage pour les contrôleurs</p>"
        },
        {
          "content": "<p>Un système de gestion des routes</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la différence entre 'nil?' et 'empty?' dans Ruby?</p>"
      },
      "options": [
        {
          "content": "<p>'nil?' vérifie si un objet est nil, tandis que 'empty?' vérifie si une collection est vide</p>",
          "correct": true
        },
        {
          "content": "<p>'nil?' et 'empty?' font la même chose</p>"
        },
        {
          "content": "<p>'empty?' vérifie si un objet est nil, tandis que 'nil?' vérifie si une collection est vide</p>"
        },
        {
          "content": "<p>'nil?' est pour les strings tandis que 'empty?' est pour les nombres</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quels sont les différents types de callbacks disponibles dans Active Record?</p>"
      },
      "options": [
        {
          "content": "<p>before_save, after_save</p>",
          "correct": true
        },
        {
          "content": "<p>before_validation, after_validation</p>",
          "correct": true
        },
        {
          "content": "<p>before_destroy, after_destroy</p>",
          "correct": true
        },
        {
          "content": "<p>before_method, after_method</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment fonctionne le système de 'garbage collection' dans Ruby?</p>"
      },
      "options": [
        {
          "content": "<p>Il libère automatiquement la mémoire des objets qui ne sont plus référencés dans l'application</p>",
          "correct": true
        },
        {
          "content": "<p>Il supprime les fichiers temporaires du serveur</p>"
        },
        {
          "content": "<p>Il nettoie la base de données des enregistrements obsolètes</p>"
        },
        {
          "content": "<p>Il supprime les anciennes sessions utilisateur</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Qu'est-ce qu'un 'proc' dans Ruby et comment est-il utilisé?</p>"
      },
      "options": [
        {
          "content": "<p>Un objet qui encapsule un bloc de code et peut être réutilisé comme une méthode</p>",
          "correct": true
        },
        {
          "content": "<p>Un processus système géré par Ruby</p>"
        },
        {
          "content": "<p>Une méthode de traitement des erreurs</p>"
        },
        {
          "content": "<p>Un type spécial de variable globale</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quels sont les différents types d'associations disponibles dans Active Record?</p>"
      },
      "options": [
        {
          "content": "<p>belongs_to</p>",
          "correct": true
        },
        {
          "content": "<p>has_many</p>",
          "correct": true
        },
        {
          "content": "<p>has_and_belongs_to_many</p>",
          "correct": true
        },
        {
          "content": "<p>has_multiple</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la différence entre 'size', 'count' et 'length' dans Active Record?</p>"
      },
      "options": [
        {
          "content": "<p>'count' effectue toujours une requête SQL, 'length' charge la collection en mémoire, 'size' choisit intelligemment entre les deux</p>",
          "correct": true
        },
        {
          "content": "<p>Ces trois méthodes sont identiques</p>"
        },
        {
          "content": "<p>'size' compte les octets, 'length' compte les caractères, 'count' compte les éléments</p>"
        },
        {
          "content": "<p>'count' est pour les nombres, 'length' pour les strings, 'size' pour les arrays</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Qu'est-ce que 'Spring' dans Ruby on Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Un préchargeur d'application qui accélère le développement en gardant l'application en mémoire</p>",
          "correct": true
        },
        {
          "content": "<p>Un framework de test automatisé</p>"
        },
        {
          "content": "<p>Un système de gestion des assets</p>"
        },
        {
          "content": "<p>Un outil de déploiement</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment fonctionne la mise en cache dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Elle stocke le résultat des requêtes ou des vues pour éviter de les recalculer à chaque fois</p>",
          "correct": true
        },
        {
          "content": "<p>Elle compresse les fichiers CSS et JavaScript</p>"
        },
        {
          "content": "<p>Elle stocke temporairement les données de session</p>"
        },
        {
          "content": "<p>Elle sauvegarde la base de données</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quels sont les avantages d'utiliser des 'concerns' dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Réutilisation du code entre différents modèles</p>",
          "correct": true
        },
        {
          "content": "<p>Organisation du code en modules logiques</p>",
          "correct": true
        },
        {
          "content": "<p>Réduction de la duplication de code</p>",
          "correct": true
        },
        {
          "content": "<p>Amélioration des performances de l'application</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Qu'est-ce qu'un 'initializer' dans Ruby on Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Un script qui s'exécute au démarrage de l'application pour configurer certains paramètres</p>",
          "correct": true
        },
        {
          "content": "<p>Une méthode pour créer de nouveaux objets</p>"
        },
        {
          "content": "<p>Un outil de configuration de la base de données</p>"
        },
        {
          "content": "<p>Un générateur de code Rails</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Que signifie 'skinny controllers, fat models'?</p>"
      },
      "options": [
        {
          "content": "<p>La logique métier doit être placée dans les modèles plutôt que dans les contrôleurs</p>",
          "correct": true
        },
        {
          "content": "<p>Les contrôleurs doivent contenir plus de code que les modèles</p>"
        },
        {
          "content": "<p>Les modèles doivent être simples et les contrôleurs complexes</p>"
        },
        {
          "content": "<p>Une règle de nommage des fichiers dans Rails</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment fonctionne l'authentification par token dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Un token unique est généré pour chaque utilisateur et utilisé pour authentifier les requêtes API</p>",
          "correct": true
        },
        {
          "content": "<p>Les tokens sont utilisés pour crypter les mots de passe</p>"
        },
        {
          "content": "<p>Les tokens servent à valider les formulaires</p>"
        },
        {
          "content": "<p>L'authentification par token n'existe pas dans Rails</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quels sont les types de tests couramment utilisés dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Tests unitaires</p>",
          "correct": true
        },
        {
          "content": "<p>Tests d'intégration</p>",
          "correct": true
        },
        {
          "content": "<p>Tests système</p>",
          "correct": true
        },
        {
          "content": "<p>Tests de performance</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Qu'est-ce qu'une 'strong parameter' dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Un mécanisme de sécurité pour contrôler quels paramètres peuvent être utilisés lors de l'attribution de masse</p>",
          "correct": true
        },
        {
          "content": "<p>Un paramètre obligatoire dans une route</p>"
        },
        {
          "content": "<p>Un paramètre de configuration du serveur</p>"
        },
        {
          "content": "<p>Un paramètre de performance</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment fonctionne le système de routage dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Il mappe les URLs aux actions des contrôleurs en suivant des conventions RESTful</p>",
          "correct": true
        },
        {
          "content": "<p>Il gère uniquement les redirections entre pages</p>"
        },
        {
          "content": "<p>Il définit la structure de la base de données</p>"
        },
        {
          "content": "<p>Il configure les paramètres du serveur web</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quels sont les hooks de cycle de vie disponibles dans Active Record?</p>"
      },
      "options": [
        {
          "content": "<p>before_create</p>",
          "correct": true
        },
        {
          "content": "<p>after_update</p>",
          "correct": true
        },
        {
          "content": "<p>after_find</p>",
          "correct": true
        },
        {
          "content": "<p>during_save</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Quelle est la différence entre 'render' et 'redirect_to'?</p>"
      },
      "options": [
        {
          "content": "<p>'render' affiche une vue spécifique, 'redirect_to' envoie une nouvelle requête à une URL différente</p>",
          "correct": true
        },
        {
          "content": "<p>'render' et 'redirect_to' font la même chose</p>"
        },
        {
          "content": "<p>'redirect_to' affiche une vue, 'render' fait une redirection</p>"
        },
        {
          "content": "<p>'render' est pour les APIs, 'redirect_to' pour les pages web</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment fonctionne l'asset pipeline dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Il compile, minimise et combine les assets (CSS, JavaScript, images) pour optimiser leur livraison</p>",
          "correct": true
        },
        {
          "content": "<p>Il gère uniquement le téléchargement de fichiers</p>"
        },
        {
          "content": "<p>Il stocke les assets dans la base de données</p>"
        },
        {
          "content": "<p>Il crée des sauvegardes des assets</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Qu'est-ce qu'un 'scope' dans Active Record?</p>"
      },
      "options": [
        {
          "content": "<p>Une méthode de classe qui encapsule une requête commune et réutilisable</p>",
          "correct": true
        },
        {
          "content": "<p>Une variable globale</p>"
        },
        {
          "content": "<p>Un type de validation</p>"
        },
        {
          "content": "<p>Un système de permissions</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Quels sont les avantages d'utiliser Active Job?</p>"
      },
      "options": [
        {
          "content": "<p>Traitement asynchrone des tâches</p>",
          "correct": true
        },
        {
          "content": "<p>Interface unifiée pour différents systèmes de file d'attente</p>",
          "correct": true
        },
        {
          "content": "<p>Planification des jobs</p>",
          "correct": true
        },
        {
          "content": "<p>Amélioration automatique des performances</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Comment fonctionne le système de migrations réversibles dans Rails?</p>"
      },
      "options": [
        {
          "content": "<p>Il permet d'annuler automatiquement les changements de schéma en définissant l'inverse de chaque opération</p>",
          "correct": true
        },
        {
          "content": "<p>Il crée une copie de la base de données avant chaque migration</p>"
        },
        {
          "content": "<p>Il supprime automatiquement les anciennes tables</p>"
        },
        {
          "content": "<p>Il génère des backups de la base de données</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Qu'est-ce qu'un 'concern' dans Rails et quand devrait-il être utilisé?</p>"
      },
      "options": [
        {
          "content": "<p>Un module qui permet d'extraire et de réutiliser du code commun entre plusieurs modèles ou contrôleurs</p>",
          "correct": true
        },
        {
          "content": "<p>Un système de gestion des erreurs</p>"
        },
        {
          "content": "<p>Une méthode de validation des données</p>"
        },
        {
          "content": "<p>Un type de variable globale</p>"
        }
      ]
    }
  ]
}