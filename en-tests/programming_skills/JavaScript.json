{
  "title": "JavaScript",
  "attributes": {
    "overview": "This test evaluates intermediate JavaScript skills, covering fundamental concepts, DOM manipulation, advanced functions, and modern ES6+ features.",
    "level": "intermediate",
    "covered_skills": [
      "JavaScript Fundamentals",
      "DOM Manipulation",
      "Asynchronous Programming",
      "ES6+ and Modern Features",
      "Error Handling and Debugging",
      "Optimization and Best Practices"
    ],
    "relevancy": "Frontend developers, full-stack developers, and any role requiring JavaScript expertise",
    "description": "JavaScript is one of the most widely used programming languages in modern web development. This test evaluates the understanding of intermediate JavaScript concepts, including closures, promises, async/await, DOM manipulation, and modern ES6+ features. Candidates will be evaluated on their ability to solve common problems and apply development best practices.",
    "category": "Programming skills",
    "language": "english",
    "questions_to_answer": 15,
    "duration_seconds": 600,
    "position": 1
  },
  "questions": [
    {
      "question_attributes": {
        "type": "multiple_choice",
        "preview": true,
        "content": "<p>What is the result of the following expression?</p><pre>console.log(typeof typeof 1);</pre>"
      },
      "options": [
        {
          "content": "<p>number</p>"
        },
        {
          "content": "<p>string</p>",
          "correct": true
        },
        {
          "content": "<p>undefined</p>"
        },
        {
          "content": "<p>object</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "preview": true,
        "content": "<p>Which statements are true regarding Promises in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>A Promise can have three states: pending, fulfilled, and rejected</p>",
          "correct": true
        },
        {
          "content": "<p>async/await is a more elegant syntax for handling Promises</p>",
          "correct": true
        },
        {
          "content": "<p>Promise.all() rejects immediately if a single Promise is rejected</p>",
          "correct": true
        },
        {
          "content": "<p>Promises can only be used with asynchronous functions</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "preview": true,
        "content": "<p>Considering the following code, what is the value of 'result'?</p><pre>const arr = [1, 2, 3, 4, 5];\nconst result = arr.reduce((acc, curr) => acc + curr, 0);</pre>"
      },
      "options": [
        {
          "content": "<p>10</p>"
        },
        {
          "content": "<p>15</p>",
          "correct": true
        },
        {
          "content": "<p>0</p>"
        },
        {
          "content": "<p>[1,2,3,4,5]</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "preview": true,
        "content": "<p>What is the most appropriate method for handling errors in an asynchronous function?</p>"
      },
      "options": [
        {
          "content": "<p>try/catch with async/await</p>",
          "correct": true
        },
        {
          "content": "<p>throw new Error()</p>"
        },
        {
          "content": "<p>window.onerror</p>"
        },
        {
          "content": "<p>error.preventDefault()</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the behavior of the following code?</p><pre>console.log(1);\nsetTimeout(() => console.log(2), 0);\nPromise.resolve().then(() => console.log(3));\nconsole.log(4);</pre>"
      },
      "options": [
        {
          "content": "<p>1, 2, 3, 4</p>"
        },
        {
          "content": "<p>1, 4, 2, 3</p>"
        },
        {
          "content": "<p>1, 4, 3, 2</p>",
          "correct": true
        },
        {
          "content": "<p>4, 3, 2, 1</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How do you correctly declare a class that inherits from another class?</p>"
      },
      "options": [
        {
          "content": "<p>class Child implements Parent {}</p>"
        },
        {
          "content": "<p>class Child extends Parent {}</p>",
          "correct": true
        },
        {
          "content": "<p>class Child inherits Parent {}</p>"
        },
        {
          "content": "<p>class Child : Parent {}</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are the appropriate methods for handling DOM events?</p>"
      },
      "options": [
        {
          "content": "<p>addEventListener</p>",
          "correct": true
        },
        {
          "content": "<p>removeEventListener</p>",
          "correct": true
        },
        {
          "content": "<p>attachEvent</p>"
        },
        {
          "content": "<p>event.preventDefault()</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the main difference between let and var?</p>"
      },
      "options": [
        {
          "content": "<p>let is block-scoped, var is function-scoped</p>",
          "correct": true
        },
        {
          "content": "<p>let cannot be reassigned</p>"
        },
        {
          "content": "<p>var is faster than let</p>"
        },
        {
          "content": "<p>let only exists in ES6+</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How do you create a deep copy of a complex object in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Object.assign({}, obj)</p>"
        },
        {
          "content": "<p>JSON.parse(JSON.stringify(obj))</p>",
          "correct": true
        },
        {
          "content": "<p>{...obj}</p>"
        },
        {
          "content": "<p>Object.create(obj)</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are the best practices for optimizing performance in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Use requestAnimationFrame for animations</p>",
          "correct": true
        },
        {
          "content": "<p>Avoid unnecessary DOM manipulations</p>",
          "correct": true
        },
        {
          "content": "<p>Use eval() for dynamic code</p>"
        },
        {
          "content": "<p>Implement event delegation</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the result of the following expression?</p><pre>['1', '2', '3'].map(parseInt)</pre>"
      },
      "options": [
        {
          "content": "<p>[1, 2, 3]</p>"
        },
        {
          "content": "<p>[1, NaN, NaN]</p>",
          "correct": true
        },
        {
          "content": "<p>['1', '2', '3']</p>"
        },
        {
          "content": "<p>[1, 2, NaN]</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How to properly handle an error in a Promise?</p>"
      },
      "options": [
        {
          "content": "<p>Use .catch()</p>",
          "correct": true
        },
        {
          "content": "<p>Use try/catch</p>"
        },
        {
          "content": "<p>Use window.onerror</p>"
        },
        {
          "content": "<p>Use throw</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Which statements are true about closures in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>They can access variables from their parent scope</p>",
          "correct": true
        },
        {
          "content": "<p>They can create memory leaks if misused</p>",
          "correct": true
        },
        {
          "content": "<p>They are always asynchronous</p>"
        },
        {
          "content": "<p>They allow data encapsulation</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the best way to compare two objects in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>JSON.stringify(obj1) === JSON.stringify(obj2)</p>",
          "correct": true
        },
        {
          "content": "<p>obj1 === obj2</p>"
        },
        {
          "content": "<p>Object.is(obj1, obj2)</p>"
        },
        {
          "content": "<p>obj1.equals(obj2)</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the result of the following expression?</p><pre>console.log(0.1 + 0.2 === 0.3);</pre>"
      },
      "options": [
        {
          "content": "<p>true</p>"
        },
        {
          "content": "<p>false</p>",
          "correct": true
        },
        {
          "content": "<p>undefined</p>"
        },
        {
          "content": "<p>NaN</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>Which method is used to create a new DOM element?</p>"
      },
      "options": [
        {
          "content": "<p>document.createElement()</p>",
          "correct": true
        },
        {
          "content": "<p>document.newElement()</p>"
        },
        {
          "content": "<p>document.createNode()</p>"
        },
        {
          "content": "<p>document.makeElement()</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are the characteristics of arrow functions?</p>"
      },
      "options": [
        {
          "content": "<p>They don't have their own this</p>",
          "correct": true
        },
        {
          "content": "<p>They cannot be used as constructors</p>",
          "correct": true
        },
        {
          "content": "<p>They are always asynchronous</p>"
        },
        {
          "content": "<p>They have a more concise syntax</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How to declare a variable that cannot be reassigned?</p>"
      },
      "options": [
        {
          "content": "<p>const</p>",
          "correct": true
        },
        {
          "content": "<p>let</p>"
        },
        {
          "content": "<p>var</p>"
        },
        {
          "content": "<p>final</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the recommended method to copy an array?</p>"
      },
      "options": [
        {
          "content": "<p>[...array]</p>",
          "correct": true
        },
        {
          "content": "<p>array.slice()</p>"
        },
        {
          "content": "<p>Array.from(array)</p>"
        },
        {
          "content": "<p>array.copy()</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are the characteristics of Sets in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Values are unique</p>",
          "correct": true
        },
        {
          "content": "<p>The order of elements is preserved</p>",
          "correct": true
        },
        {
          "content": "<p>Can contain duplicates</p>"
        },
        {
          "content": "<p>Accepts any type of value</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the result of this expression?</p><pre>const obj = { a: 1 };\nObject.freeze(obj);\nobj.a = 2;\nconsole.log(obj.a);</pre>"
      },
      "options": [
        {
          "content": "<p>2</p>"
        },
        {
          "content": "<p>1</p>",
          "correct": true
        },
        {
          "content": "<p>undefined</p>"
        },
        {
          "content": "<p>Error</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are the security best practices in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Validate user inputs</p>",
          "correct": true
        },
        {
          "content": "<p>Use HTTPS for API requests</p>",
          "correct": true
        },
        {
          "content": "<p>Store JWT tokens in localStorage</p>"
        },
        {
          "content": "<p>Escape HTML data</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What's the difference between Map and WeakMap?</p>"
      },
      "options": [
        {
          "content": "<p>WeakMap only accepts objects as keys</p>",
          "correct": true
        },
        {
          "content": "<p>Map is faster than WeakMap</p>"
        },
        {
          "content": "<p>WeakMap can be iterated</p>"
        },
        {
          "content": "<p>Map uses more memory</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How to detect if an object is iterable?</p>"
      },
      "options": [
        {
          "content": "<p>typeof obj === 'iterable'</p>"
        },
        {
          "content": "<p>Symbol.iterator in obj</p>",
          "correct": true
        },
        {
          "content": "<p>obj.isIterable()</p>"
        },
        {
          "content": "<p>Array.isArray(obj)</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are the characteristics of Web Workers?</p>"
      },
      "options": [
        {
          "content": "<p>They run in a separate thread</p>",
          "correct": true
        },
        {
          "content": "<p>They don't have access to the DOM</p>",
          "correct": true
        },
        {
          "content": "<p>They can directly modify the user interface</p>"
        },
        {
          "content": "<p>They communicate via postMessage</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What's the best way to implement a singleton in modern JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Use an ES6 module</p>",
          "correct": true
        },
        {
          "content": "<p>Use a class with a private constructor</p>"
        },
        {
          "content": "<p>Use Object.create</p>"
        },
        {
          "content": "<p>Use a constructor function</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How to properly handle an error in an async/await function?</p>"
      },
      "options": [
        {
          "content": "<p>Use try/catch</p>",
          "correct": true
        },
        {
          "content": "<p>Use .catch()</p>"
        },
        {
          "content": "<p>Use window.onerror</p>"
        },
        {
          "content": "<p>Use Promise.catch()</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are valid methods for debugging JavaScript code?</p>"
      },
      "options": [
        {
          "content": "<p>Use console.trace()</p>",
          "correct": true
        },
        {
          "content": "<p>Use debugger;</p>",
          "correct": true
        },
        {
          "content": "<p>Use DevTools breakpoints</p>",
          "correct": true
        },
        {
          "content": "<p>Use alert()</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What's the difference between null and undefined?</p>"
      },
      "options": [
        {
          "content": "<p>undefined is the absence of value, null is an explicitly empty value</p>",
          "correct": true
        },
        {
          "content": "<p>They are exactly the same</p>"
        },
        {
          "content": "<p>null is a bug in JavaScript</p>"
        },
        {
          "content": "<p>undefined cannot be assigned</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How to optimize a loop for better performance?</p>"
      },
      "options": [
        {
          "content": "<p>Cache the array length in a variable</p>",
          "correct": true
        },
        {
          "content": "<p>Always use forEach</p>"
        },
        {
          "content": "<p>Use for...in for arrays</p>"
        },
        {
          "content": "<p>Use while instead of for</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are the characteristics of Generators?</p>"
      },
      "options": [
        {
          "content": "<p>They can be paused and resumed</p>",
          "correct": true
        },
        {
          "content": "<p>They use yield to return values</p>",
          "correct": true
        },
        {
          "content": "<p>They are always asynchronous</p>"
        },
        {
          "content": "<p>They can maintain an internal state</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the best way to implement inheritance in modern JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Use extends with classes</p>",
          "correct": true
        },
        {
          "content": "<p>Use Object.create</p>"
        },
        {
          "content": "<p>Use prototype directly</p>"
        },
        {
          "content": "<p>Use mixins</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How to correctly implement a queue in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Use push() and shift()</p>",
          "correct": true
        },
        {
          "content": "<p>Use push() and pop()</p>"
        },
        {
          "content": "<p>Use unshift() and pop()</p>"
        },
        {
          "content": "<p>Use concat() and slice()</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the best practice for handling dates in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Use a library like Day.js or date-fns</p>",
          "correct": true
        },
        {
          "content": "<p>Use new Date() directly</p>"
        },
        {
          "content": "<p>Use Date.parse()</p>"
        },
        {
          "content": "<p>Manipulate Unix timestamps</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are the best practices for unit testing in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Test edge cases</p>",
          "correct": true
        },
        {
          "content": "<p>Isolate tests</p>",
          "correct": true
        },
        {
          "content": "<p>Only test the happy path</p>"
        },
        {
          "content": "<p>Use appropriate mocks</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the main difference between localStorage and sessionStorage?</p>"
      },
      "options": [
        {
          "content": "<p>sessionStorage expires when the tab is closed</p>",
          "correct": true
        },
        {
          "content": "<p>localStorage has a larger size limit</p>"
        },
        {
          "content": "<p>sessionStorage is more secure</p>"
        },
        {
          "content": "<p>localStorage is faster</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How to implement a memoize function in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Use a closure with a Map cache</p>",
          "correct": true
        },
        {
          "content": "<p>Use a global object</p>"
        },
        {
          "content": "<p>Use localStorage</p>"
        },
        {
          "content": "<p>Use a static variable</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are the characteristics of Proxies in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>They can intercept operations on objects</p>",
          "correct": true
        },
        {
          "content": "<p>They allow custom validation</p>",
          "correct": true
        },
        {
          "content": "<p>They modify the original object</p>"
        },
        {
          "content": "<p>They can implement virtual getters/setters</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the best way to handle network errors in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Use try/catch with async/await</p>",
          "correct": true
        },
        {
          "content": "<p>Check window.navigator.onLine</p>"
        },
        {
          "content": "<p>Use XMLHttpRequest</p>"
        },
        {
          "content": "<p>Use alert() for errors</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the best approach for managing global state in modern JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Use a state manager like Redux or MobX</p>",
          "correct": true
        },
        {
          "content": "<p>Use global variables</p>"
        },
        {
          "content": "<p>Use localStorage</p>"
        },
        {
          "content": "<p>Pass state through props</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are the best practices for accessibility in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Use appropriate ARIA roles</p>",
          "correct": true
        },
        {
          "content": "<p>Handle keyboard navigation</p>",
          "correct": true
        },
        {
          "content": "<p>Ignore screen readers</p>"
        },
        {
          "content": "<p>Maintain focus order</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How to effectively manage memory in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Avoid circular references</p>",
          "correct": true
        },
        {
          "content": "<p>Use lots of closures</p>"
        },
        {
          "content": "<p>Keep global references</p>"
        },
        {
          "content": "<p>Don't use the garbage collector</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the best practice for implementing image lazy loading?</p>"
      },
      "options": [
        {
          "content": "<p>Use the loading='lazy' attribute</p>",
          "correct": true
        },
        {
          "content": "<p>Use setTimeout</p>"
        },
        {
          "content": "<p>Load all images at startup</p>"
        },
        {
          "content": "<p>Use GIFs as placeholders</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What are the best practices for JavaScript performance optimization?</p>"
      },
      "options": [
        {
          "content": "<p>Minimize DOM manipulations</p>",
          "correct": true
        },
        {
          "content": "<p>Use event delegation</p>",
          "correct": true
        },
        {
          "content": "<p>Avoid file compression</p>"
        },
        {
          "content": "<p>Use code splitting</p>",
          "correct": true
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How to properly implement a caching system in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Use Service Workers with Cache API</p>",
          "correct": true
        },
        {
          "content": "<p>Store everything in localStorage</p>"
        },
        {
          "content": "<p>Use global variables</p>"
        },
        {
          "content": "<p>Disable browser cache</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>What methods can be used to clone an object in JavaScript?</p>"
      },
      "options": [
        {
          "content": "<p>Object.assign({}, obj)</p>",
          "correct": true
        },
        {
          "content": "<p>JSON.parse(JSON.stringify(obj))</p>",
          "correct": true
        },
        {
          "content": "<p>{...obj}</p>",
          "correct": true
        },
        {
          "content": "<p>obj.clone()</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>What is the result of this expression?</p><pre>const arr = [1, 2, 3];\nconst [,, x] = arr;\nconsole.log(x);</pre>"
      },
      "options": [
        {
          "content": "<p>1</p>"
        },
        {
          "content": "<p>2</p>"
        },
        {
          "content": "<p>3</p>",
          "correct": true
        },
        {
          "content": "<p>undefined</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_choice",
        "content": "<p>How can you check if an object is an instance of a particular class?</p>"
      },
      "options": [
        {
          "content": "<p>obj.constructor === Class</p>"
        },
        {
          "content": "<p>obj instanceof Class</p>",
          "correct": true
        },
        {
          "content": "<p>obj.isInstanceOf(Class)</p>"
        },
        {
          "content": "<p>Class.isPrototypeOf(obj)</p>"
        }
      ]
    },
    {
      "question_attributes": {
        "type": "multiple_response",
        "content": "<p>Which statements are true regarding ES6 modules?</p>"
      },
      "options": [
        {
          "content": "<p>Modules are executed in strict mode by default</p>",
          "correct": true
        },
        {
          "content": "<p>Modules can have multiple default exports</p>"
        },
        {
          "content": "<p>Imports are hoisted</p>",
          "correct": true
        },
        {
          "content": "<p>Modules have their own scope</p>",
          "correct": true
        }
      ]
    }
  ]
}